//Important:
//To use this script you must provide credit to the Authors on your Workshop page of the map you use this in
//Authors: IceGrenade / Symbo

//Difficulty to Implement = 4/10 (This code snippet is not for beginners, some prior knowledge is assumed)
//[0=Easy-10=Advanced]

//Requires the following functions:
//https://github.com/IceGrenade/bo3/blob/master/scripts/screen_text.gsc

//Instructions:
// 1. Modify the Message content (More info on screen_text script: https://github.com/IceGrenade/bo3/blob/master/scripts/screen_text)
// 2. Place any number of script_models in radiant with the target name of 'gold'
// 3. Change the sound or add sound with alias of 'goldsound' for each shot gold
// 4. Give all door parts the name of "door_piece" this includes the script_brushmodels and script_models that make the door

//Place this at the bottom of your Main() function before the closing bracket (})

thread ice_Money();

//Place this at the bottom of your mapname.gsc
function ice_Money()
{
	goldmulti = GetEntArray("gold","targetname");
	level.gold = 0;
	level.totalgold = 0;
	foreach (gold in goldmulti)
	{
		gold thread givegold();
		level.totalgold += 1;
	}
}

function givegold()
{
	self setCanDamage(1);
	self waittill("damage", damage, attacker, dir, point, mod, model, tag, part, weapon, flags, inflictor, chargeLevel);
	PlayFX(level._effect["powerup_grabbed_red"], self.origin);
	self PlaySound("goldsound");
	inflictor.score += 400;
	self Delete();
	level.gold += 1;
	//thread screen_text ("^2Gold found: ^4"+level.gold+"/"+level.totalgold, 2, 1 );
	if(level.gold == level.totalgold)
	{
		//thread screen_text ("^1ALL GOLD FOUND!", 3, 2 );
		foreach (player in GetPlayers())
			player thread give_player_all_perks();
		door = GetEntArray("door_piece", "targetname");
		foreach(part in door)
			part Delete();
	}
}

function give_player_all_perks()
{
    for( i=0;i<25;i++ )
    {
        self PlaySound( "goldsound" );
        self.score += 200;
        wait 0.20;
    }
    a_str_perks = GetArrayKeys( level._custom_perks );
    foreach( str_perk in a_str_perks )
    {
        if( !self HasPerk( str_perk ) )
        {
            self zm_perks::give_perk( str_perk, false );
            if (isdefined(level.perk_bought_func))
                self [[ level.perk_bought_func ]]( str_perk );
        }
    }
}
